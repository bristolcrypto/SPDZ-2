"""
  Compute the sum of clients input arrays.

  Demonstrate clients external to computing parties supplying input and receiving an authenticated result. See sum-client.cpp for client (and setup instructions).

  For an implementation with communications security see sum_commsec.mpc.
  
  Wait for MAX_NUM_CLIENTS to join the game or client finish flag to be sent
  before calculating the maximum.

  Note each client connects in a single thread and so is potentially blocked.
  
  Each round / game will reset and so this runs indefinitiely.
"""

from Compiler.types import sint, regint, Array, MemValue
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else


PORTNUM = 14000
MAX_NUM_CLIENTS = 8

def accept_client_input():
    """
    Wait for socket connection, send share of random value, receive input and deduce share.
    Expect 3 inputs: unique id, value_to_add and flag to indicate end of this round.
    """
    client_socket_id = regint()
    acceptclientconnection(client_socket_id, PORTNUM)
    
    first_packet = sint.receive_from_client(2, client_socket_id)
    array_size = first_packet[1].reveal()
    new_size = array_size + 2
    
    print_ln('\nsize of array to expect %s \n', array_size)
    print_ln('\nsNew size %s \n', new_size)
    
    # client_inputs = sint.receive_from_client(new_size, client_socket_id)
    
    # upper_bound = 10
    # client_inputs = Array(upper_bound, sint)
    # @for_range(new_size)
    # def _(i):
    for i in range(5):
        print_ln('\nBefore \n')
        
        client_inputs = sint.receive_from_client(1, client_socket_id)
        
        print_ln('\nAfter %s \n', client_inputs[0].reveal())
        
        # print_ln('\n\nfooooo %s \n', client_inputs[0].reveal())
    
    
    # @for_range(20)
    # def loop_body(i):
    #     print_ln('\n i %s \n', i)
        
    print_ln('\nDone %s \n', new_size)

    
    return client_socket_id, client_inputs[0], client_inputs[0], client_inputs[0]
    # return client_socket_id, client_inputs[0], client_inputs[1], client_inputs[2]


def compute_sum_of_clients(number_clients, client_values):
    """Compute sum of client_values"""
    sum_result = Array(1, sint)
    sum_result[0] = sint(0)

    @for_range(number_clients)
    def loop_body(i):
        
        sum_result[0] += client_values[i]

    return sum_result[0]


def share_sum_to_clients(sockets, number_clients, clients_sum):
    """Send share of winning client id to all clients who joined game."""

    # Setup authenticate result using share of random.
    # client can validate S clients_sum * S rnd_from_triple = S auth_result
    rnd_from_triple = sint.get_random_triple()[0]
    auth_result = clients_sum * rnd_from_triple

    @for_range(number_clients)
    def loop_body(i):
        sint.write_shares_to_socket(sockets[i], [clients_sum, rnd_from_triple, auth_result])


def main():
    """Listen in while loop for players to join a game.
    Once maxiumum reached or have notified that round finished, run comparison and return result."""
    # Start listening for client socket connections
    listen(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    @do_while
    def game_loop():
        print_ln('\n\nStarting a new round of the game.')

        # Clients socket id (integer).
        client_sockets = Array(MAX_NUM_CLIENTS, regint)
        # Number of clients
        number_clients = MemValue(regint(0))
        # Clients secret input.
        client_values = Array(MAX_NUM_CLIENTS, sint)
        # Client ids to identity client
        client_ids = Array(MAX_NUM_CLIENTS, sint)

        # Loop round waiting for each client to connect
        @do_while
        def client_connections():
            
            client_sockets[number_clients], client_ids[number_clients], client_values[number_clients], finish = accept_client_input()
            
            number_clients.write(number_clients+1)

            # continue while both expressions are false
            return (number_clients >= MAX_NUM_CLIENTS) + finish.reveal() == 0 

        sum_result = compute_sum_of_clients(number_clients, client_values)

        # print_ln('Computed sum %s.', sum_result.reveal())

        share_sum_to_clients(client_sockets, number_clients, sum_result)

        return True

main()
