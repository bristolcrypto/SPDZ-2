import math
# Initial matrix

A1 = [sfloat(1), sfloat(2), sfloat(3)]
A2 = [sfloat(4), sfloat(4), sfloat(6)]
A3 = [sfloat(7), sfloat(8), sfloat(9)]

A = [A1, A2, A3]


length = len(A[0])
#Extend
for i in xrange(length):
    A[i] = A[i] + [sfloat(0)]*(i) + [sfloat(1)] + [sfloat(0)]*(length-i-1)
#A1 = A1 + [sfloat(1), sfloat(0), sfloat(0)]
#A2 = A2 + [sfloat(0), sfloat(1), sfloat(0)]
#A3 = A3 + [sfloat(0), sfloat(0), sfloat(1)]
#A = [A1,A2,A3]

#TODO test if 0
for p in xrange(length):
    pivot = A[p][p]
    #Normalize
    for j in xrange(p,2*length):
        A[p][j] = A[p][j]/pivot
    #update rest
    for i in xrange(p+1,length):
        for j in reversed(xrange(2*length)):
            A[i][j] = A[i][j] - A[p][j]*A[i][p]
#backwards
for p in reversed(xrange(length)):
    for i in xrange(0, p):
        for j in reversed(xrange(p, 2*length)):
            A[i][j] = A[i][j] - A[p][j] * A[i][p]
#print
for i in xrange(length):
    for j in xrange(length, 2*length):
        print_ln('A[%s][%s] = (%s, %s, %s, %s)', i, j, A[i][j].v.reveal(), A[i][j].p.reveal(), A[i][j].z.reveal(), A[i][j].s.reveal())
